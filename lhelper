#!/usr/bin/env bash

LHELPER_COMMAND_NAME=`basename $0`

if [ "$#" -lt 1 ]; then
    echo "Usage: $LHELPER_COMMAND_NAME <command> [<other options>]"
    exit 1
fi

LHELPER_BIN_DIRNAME="$(dirname $0)"
LHELPER_PREFIX="${LHELPER_BIN_DIRNAME%/bin}"

export LHELPER_WORKING_DIR="$LHELPER_PREFIX/var/lib/lhelper"
export LHELPER_DIR="$LHELPER_PREFIX/share/lhelper"

if [ ! -d "${LHELPER_DIR}" ]; then
    echo "error: directory "${LHELPER_DIR}" not found."
    echo "Lhelper may be not properly installed."
fi

cat_digest () {
    cat << EOF
CC="$CC"
CXX="$CXX"
CFLAGS="$CFLAGS"
CXXFLAGS="$CXXFLAGS"
BUILD_TYPE="$BUILD_TYPE"
MACHTYPE="$MACHTYPE"
CC_VERSION="$($CC --version | head -n 1)"
CXX_VERSION="$($CXX --version | head -n 1)"
CC_DUMPMACHINE="$($CC -dumpmachine)"
EOF
}

build_env_digest () {
    source "$LHELPER_ENV_PREFIX/bin/lhelper-config"
    local digest_a=($(cat_digest | md5sum))
    local digest="${digest_a[0]}"
    if [ ! -f "$LHELPER_WORKING_DIR/digests/$digest" ]; then
        cat_digest > "$LHELPER_WORKING_DIR/digests/$digest"
    fi
    echo "$digest"
}

prepare_temp_dir () {
    local temp_dir="$1/tmp"
    rm -fr "$temp_dir"
    mkdir "$temp_dir"
}

# Relocate prefix path references for all files in a library install's
# directory.
library_dir_reloc () {
    local archive_dir="$1"
    local old_prefix="$2"
    local new_prefix="$3"
    find "$archive_dir" '(' -name '*.la' -or -name '*.pc' ')' -exec sed -i "s/${old_prefix}/${new_prefix}/g" '{}' \;
}

# Extract library archive and relocate prefix path references.
extract_archive_reloc () {
    $(prepare_temp_dir "$LHELPER_WORKING_DIR")
    local tar_package_filename="$1"
    local old_prefix="$2"
    local new_prefix="$3"
    local _install_prefix="$4"
    local package_temp_dir="$LHELPER_WORKING_DIR/tmp"
    tar -C "$package_temp_dir" -xf "$LHELPER_WORKING_DIR/packages/${tar_package_filename}"
    library_dir_reloc "$package_temp_dir" "$old_prefix" "$new_prefix"
    cp -a "$package_temp_dir/." "$_install_prefix"
}

set_prefix_variables () {
    local prefix_dir="$1"
    INSTALL_PREFIX="$prefix_dir"
    local sed_pattern
    if [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "mingw"* ]]; then
        WIN_INSTALL_PREFIX="${INSTALL_PREFIX/#\/c\//c:\/}"
        # We need to produce a sed pattern that match both 'c:/' and '/c/' for the
        # drive letter.
        # The pattern is '\([cC]:\|\/c\)' but the backslash need to be escaped
        # of the RHS of sed's edit command, so it becomes: '\\([cC]:\\|\/c\/)'.
        sed_pattern="$(echo "${WIN_INSTALL_PREFIX}" | sed -e 's/\([a-zA-Z]\):/\\(\[\L\1\U\1\]:\\|\/\L\1\\)/')"
    else
        WIN_INSTALL_PREFIX="${INSTALL_PREFIX}"
        sed_pattern="${INSTALL_PREFIX}"
    fi
    SED_PREFIX_PATTERN="${sed_pattern//\//\\\/}"
    export INSTALL_PREFIX WIN_INSTALL_PREFIX SED_PREFIX_PATTERN
}

# Escape the '/' so that it is suitable for sed as a RHS term in
# substitute (s) command, like in sed -e 's/this/that/' after the 2nd /.
sed_replace_escape () {
    echo "${1//\//\\\/}"
}

latest_package_version () {
    local package="$1"
    cat "$LHELPER_DIR/recipes/index" | while read index_package version
    do
        if [[ "$index_package" == "$package" ]]; then
            echo "$version"
            return 0
        fi
    done
    return 1
}

library_install () {
    if [ -z ${LHELPER_ENV_NAME+x} ]; then
        echo "error: no environment defined"
        exit 1
    fi

    local package="$1"
    shift

    local options_a=()
    local pic_option
    for opt in "${@:1}"; do
        case $opt in
            --pic)
                if [[ $MACHTYPE =~ linux ]]; then
                    pic_option=$opt
                fi
                ;;
            --enable-*)
                options_a+=("$opt")
                ;;
            *)
                echo "error: unsupported package option: \"$opt\""
                exit 1
                ;;
        esac
        shift
    done

    local options_short=()
    for opt in "${options_a[@]}"; do
        options_short+=("${opt/--enable-/}")
    done
    if [ -n "$pic_option" ]; then
        options_short+=('pic')
    fi
    local options_tag=""
    if [[ ${#options_short[@]} -ne 0 ]]; then
        options_tag="_${options_short[*]}"
    fi

    local version
    if [ -z "$1" ]; then
        version="$(latest_package_version "$package")"
        if [ -z "$version" ]; then
            echo "error: cannot find version number for \"${package}\""
            exit 1
        fi
        if [[ ${#options_short[@]} -eq 0 ]]; then
            echo "Lhelper: using version $version"
        else
            echo "Lhelper: using version $version with options: ${options_short[*]}"
        fi
    else
        version="$1"
    fi

    local recipe_filename="${package}_${version}.sh"
    if [ ! -f "$LHELPER_DIR/recipes/${recipe_filename}" ]; then
        echo "error: no recipe found for \"${package}\" version ${version}."
        exit 1
    fi

    source "$LHELPER_DIR/build-helper.sh"
    export -f enter_git_repository enter_remote_archive inside_git_apply_patch inside_archive_apply_patch build_and_install install_pkgconfig_file interrupt_clean_archive configure_options meson_options

    LHELPER_TEMP_ROOT="$LHELPER_WORKING_DIR/tmp"
    set_prefix_variables "$LHELPER_TEMP_ROOT"

    source "$LHELPER_ENV_PREFIX/bin/lhelper-config"

    local digest=$(build_env_digest)
    local tar_package_filename="${package}${options_tag}_${version}_${digest}.tar.gz"
    if [[ "$version" != "git-"* && -f "$LHELPER_WORKING_DIR/packages/${tar_package_filename}" ]]; then
        echo "Lhelper: found an existing package"
        echo "Lhelper: extracting package"
    else
        $(prepare_temp_dir "$LHELPER_WORKING_DIR")

        if [ -n "$pic_option" ]; then
            CFLAGS="$CFLAGS -fPIC"
            CXXFLAGS="$CXXFLAGS -fPIC"
        fi

        echo "Lhelper: building library..."
        # Execute the recipe
        bash -e "$LHELPER_DIR/recipes/${recipe_filename}" "${package}" "${version}" "${options_a[@]}"
        if [ $? -ne 0 ]; then
            echo "Lhelper: error building library \"$package\""
            exit 1
        fi
        echo "Lhelper: build done"

        library_dir_reloc "$LHELPER_TEMP_ROOT" "$SED_PREFIX_PATTERN" '__LHELPER_PREFIX__'

        echo "Lhelper: saving package"
        tar -C "$LHELPER_TEMP_ROOT" -czf "${tar_package_filename}" .
        mv "${tar_package_filename}" "$LHELPER_WORKING_DIR/packages"
    fi
    set_prefix_variables "$LHELPER_ENV_PREFIX"
    extract_archive_reloc "${tar_package_filename}" '__LHELPER_PREFIX__' "$(sed_replace_escape "$WIN_INSTALL_PREFIX")" "$INSTALL_PREFIX"
    echo "Lhelper: done"
}

start_subshell () {
    bash --init-file "$LHELPER_WORKING_DIR/environments/$1"
}

create_env () {
    bash "$LHELPER_DIR/create-env.sh" "$1" "$2"
}

# Take the environment name and its install prefix as arguments.
print_create_env_message () {
    echo "Environment $1 successfully created in directory:"
    echo ""
    echo "$2"
    echo ""
    echo "It can be activated using the command:"
    echo "> lhelper activate $1"
    echo ""
    echo "The build options can be modified with the command:"
    echo "> lhelper edit"
}

case $1 in
install)
    if [ $# -lt 2 ]; then
        echo "Usage: $LHELPER_COMMAND_NAME install <library-name> [version]"
        exit 1
    fi
    if [ -z ${LHELPER_ENV_NAME+x} ]; then
        echo "Please activate an environment before."
        exit 1
    fi
    library_install "${@:2}"
    ;;
activate)
    if [ $# -lt 2 ]; then
        echo "Usage: $LHELPER_COMMAND_NAME activate <env-name>"
        exit 1
    fi
    start_subshell "$2"
    ;;
create)
    if [ $# -lt 2 ]; then
        echo "Usage: $LHELPER_COMMAND_NAME create <env-name> [env-root-dir]"
        exit 1
    fi
    env_prefix="${3-$LHELPER_WORKING_DIR/env/$2}"
    create_env "$2" "$env_prefix"
    "${EDITOR-vim}" "${env_prefix}/bin/lhelper-config"
    print_create_env_message "$2" "$env_prefix"
    ;;
edit)
    if [ -z ${LHELPER_ENV_NAME+x} ]; then
        echo "Please activate an environment before."
        exit 1
    fi
    "${EDITOR-vim}" "$LHELPER_ENV_PREFIX/bin/lhelper-config"
    ;;
delete)
    if [ $# -lt 2 ]; then
        echo "Usage: $LHELPER_COMMAND_NAME delete <env-name>"
        exit 1
    fi
    _env_name="$2"
    if [ -f "$LHELPER_WORKING_DIR/environments/$_env_name" ]; then
        source "$LHELPER_WORKING_DIR/environments/$_env_name"
    else
        echo "Environment $_env_name not found."
        exit 1
    fi
    if [ -n "$LHELPER_ENV_PREFIX" ]; then
        echo -n "Are you sure you want to delete the environment $_env_name (y/n) ? "
        read _sure_delete
        if [[ "$_sure_delete" == "y" || "$_sure_delete" == "Y" ]]; then
            rm -fr "$LHELPER_ENV_PREFIX"
            rm -f "$LHELPER_WORKING_DIR/environments/$_env_name"
            echo "Environment $_env_name successfully deleted."
        else
            echo "Operation canceled."
        fi
        unset _sure_delete
    fi
    ;;
list)
    if [ "$2" == environments ]; then
        ls -1 "$LHELPER_WORKING_DIR/environments"
    elif [ "$2" == recipes ]; then
        ls -1 "$LHELPER_DIR/recipes" | sed 's/\.sh//'
    else
        echo "Usage: $LHELPER_COMMAND_NAME list (environments|recipes)"
        exit 1
    fi
    ;;
*)
    echo "error: unknown command $1"
    exit 1
    ;;
esac
